{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterValue","handleFilter","onChange","value","PersonForm","setNewPerson","addPerson","newPerson","onSubmit","event","name","target","number","type","Persons","persons","handleDelete","map","person","key","onClick","id","Notification","message","isError","className","style","color","baseUrl","axios","get","then","response","data","newObject","post","delete","updatedObject","put","App","useState","setPersons","filter","setFilter","notification","setNotification","useEffect","phonebookService","phones","personsToShow","length","toLowerCase","includes","preventDefault","newPersonObject","existedPerson","find","window","confirm","setTimeout","concat","personToDelete","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73b81a99.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ filterValue, handleFilter }) => (\r\n  <div>\r\n    filter shown with: <input onChange={handleFilter} value={filterValue} />\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({ setNewPerson, addPerson, newPerson }) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <div>\r\n        name:{\" \"}\r\n        <input\r\n          onChange={event =>\r\n            setNewPerson({ ...newPerson, name: event.target.value })\r\n          }\r\n          value={newPerson.name}\r\n        />\r\n        <br />\r\n        phone:{\" \"}\r\n        <input\r\n          onChange={event =>\r\n            setNewPerson({ ...newPerson, number: event.target.value })\r\n          }\r\n          value={newPerson.number}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Persons = ({ persons, handleDelete }) =>\r\n  persons.map(person => (\r\n    <p key={person.name}>\r\n      {person.name} : {person.number}\r\n      <button onClick={() => handleDelete(person.id)}>delete</button>\r\n    </p>\r\n  ));\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message, isError }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  const errorStyle = { color: \"red\" };\r\n\r\n  return (\r\n    <div className=\"notification\" style={isError && errorStyle}>\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst deleteEntry = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst updateEntry = (id, updatedObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, deleteEntry, updateEntry };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/Filter\";\r\nimport PersonForm from \"./components/PersonForm\";\r\nimport Persons from \"./components/Persons\";\r\nimport Notification from \"./components/Notification\";\r\nimport phonebookService from \"./services/phonebook\";\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newPerson, setNewPerson] = useState({ name: \"\", number: \"\" });\r\n  const [filter, setFilter] = useState(\"\");\r\n  const [notification, setNotification] = useState({\r\n    message: null,\r\n    isError: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    phonebookService.getAll().then(phones => setPersons(phones));\r\n  }, []);\r\n\r\n  const personsToShow = filter.length\r\n    ? persons.filter(person =>\r\n        person.name.toLowerCase().includes(filter.toLowerCase())\r\n      )\r\n    : persons;\r\n\r\n  const addPerson = event => {\r\n    event.preventDefault();\r\n\r\n    const newPersonObject = {\r\n      name: newPerson.name,\r\n      number: newPerson.number\r\n    };\r\n\r\n    const existedPerson = persons.find(\r\n      person => person.name === newPerson.name\r\n    );\r\n\r\n    if (existedPerson) {\r\n      if (\r\n        window.confirm(\r\n          `${existedPerson.name} is already added to phonebook, replace the old number with a new one?`\r\n        )\r\n      ) {\r\n        newPersonObject.id = existedPerson.id;\r\n\r\n        phonebookService\r\n          .updateEntry(existedPerson.id, newPersonObject)\r\n          .then(data => {\r\n            setNotification({\r\n              message: `Added ${newPerson.name}`,\r\n              isError: false\r\n            });\r\n            setTimeout(\r\n              () => setNotification({ message: null, isError: null }),\r\n              5000\r\n            );\r\n            setPersons(\r\n              persons\r\n                .filter(person => person.id !== existedPerson.id)\r\n                .concat(data)\r\n            );\r\n            setNewPerson({ name: \"\", number: \"\" });\r\n          });\r\n      }\r\n    } else {\r\n      newPersonObject.id = persons[persons.length - 1].id + 1;\r\n\r\n      phonebookService.create(newPersonObject).then(data => {\r\n        setNotification({\r\n          message: `Added ${newPerson.name}`,\r\n          isError: false\r\n        });\r\n        setTimeout(\r\n          () => setNotification({ message: null, isError: null }),\r\n          5000\r\n        );\r\n        setPersons(persons.concat(data));\r\n        setNewPerson({ name: \"\", number: \"\" });\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleFilter = event => setFilter(event.target.value);\r\n\r\n  const handleDelete = id => {\r\n    const personToDelete = persons.find(person => person.id === id);\r\n    if (window.confirm(`Delete ${personToDelete.name} ?`)) {\r\n      phonebookService\r\n        .deleteEntry(id)\r\n        .then(() => setPersons(persons.filter(person => person.id !== id)))\r\n        .catch(error => {\r\n          setNotification({\r\n            message: `the note '${personToDelete.name}' was already deleted from server`,\r\n            isError: true\r\n          });\r\n          setTimeout(\r\n            () => setNotification({ message: null, isError: null }),\r\n            5000\r\n          );\r\n          setPersons(persons.filter(person => person.id !== id));\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      <Notification\r\n        message={notification.message}\r\n        isError={notification.isError}\r\n      />\r\n\r\n      <Filter filterValue={filter} handleFilter={handleFilter} />\r\n      <h2>Add a new</h2>\r\n      <PersonForm\r\n        addPerson={addPerson}\r\n        setNewPerson={setNewPerson}\r\n        newPerson={newPerson}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <Persons persons={personsToShow} handleDelete={handleDelete} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}